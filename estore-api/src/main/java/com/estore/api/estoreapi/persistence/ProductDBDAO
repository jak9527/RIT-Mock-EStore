package com.estore.api.estoreapi.persistence;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Map;
import java.util.TreeMap;
import java.util.logging.Logger;

import com.estore.api.estoreapi.model.Product;
import org.springframework.data.mongodb.repository.MongoRepository;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

/**
 * Implements the functionality for Database persistence for Products through MongoDB
 * 
 * {@literal @}Component Spring annotation instantiates a single instance of this
 * class and injects the instance into other classes as needed
 * 
 * @author SWEN Faculty
 * @author Andrew Bush (apb2471@rit.edu)
 */
@Component
@EnableMongoRepositories
public class ProductDBDAO implements ProductDAO {
    private static final Logger LOG = Logger.getLogger(ProductDBDAO.class.getName());
    Map<Integer,Product> products;   //Provides a local cache of the product objects

    @Autowired
    ProductRepository productRepo;

    /**
     * Creates a Product File Data Access Object
     * 
     * @param filename Filename to read from and write to
     * @param objectMapper Provides JSON Object to/from Java Object serialization and deserialization
     * 
     * @throws IOException when file cannot be accessed or read from
     */
    public ProductFileDAO() throws IOException {
        load();  // load the products from the database
    }

    /**
     * Generates an array of {@linkplain Product product} from the tree map
     * 
     * @return  The array of {@link Product product}, may be empty
     */
    private Product[] getProductsArray() {
        return getProductsArray(null);
    }

    /**
     * Generates an array of {@linkplain Product products} from the tree map for any
     * {@linkplain Product products} that contains the text specified by containsText
     * <br>
     * If containsText is null, the array contains all of the {@linkplain Product products}
     * in the tree map
     * 
     * @return  The array of {@link Product products}, may be empty
     */
    private Product[] getProductsArray(String containsText) { // if containsText == null, no filter
        ArrayList<Product> productArrayList = new ArrayList<>();

        for (Product product : products.values()) {
            if (containsText == null || product.getName().contains(containsText)) {
                productArrayList.add(product);
            }
        }

        Product[] productArray = new Product[productArrayList.size()];
        productArrayList.toArray(productArray);
        return productArray;
    }

    /**
     * Saves the {@linkplain Product products} from the map into the Database
     * using the save method of the MongoDB repository.
     * 
     * @return true if the {@link Product products} were written successfully
     * 
     */
    private boolean save() {
        Product[] productArray = getProductsArray();

        productRepo.deleteAll(); // Deletes all the documents in the collection

        // Saves each product in the product array in to the repository.
        for (Product product : productArray) {
            productRepo.save(product);
        }
        return true;
    }

    /**
     * Loads {@linkplain Product products} from the Database into the map
     * <br>
     * 
     * @return true if the file was read successfully
     * 
     * @throws IOException when file cannot be accessed or read from
     */
    private boolean load() {
        products = new TreeMap<>();

        // Obtains the BSON Documents from the DB into an array of products
        List<Product> productArray = productRepo.findAll()

        // Add each product to the tree map and keep track of the greatest id
        for (Product product : productArray) {
            products.put(product.getId(), product);
        }
        return true;
    }

    /**
    ** {@inheritDoc}
     */
    @Override
    public Product[] getProducts() {
        synchronized(products) {
            return getProductsArray();
        }
    }

    /**
    ** {@inheritDoc}
     */
    @Override
    public Product[] findProducts(String containsText) {
        synchronized(products) {
            return getProductsArray(containsText);
        }
    }

    /**
    ** {@inheritDoc}
     */
    @Override
    public Product getProduct(int id) {
        synchronized(products) {
            if (products.containsKey(id))
                return products.get(id);
            else
                return null;
        }
    }

    /**
    ** {@inheritDoc}
    */
    @Override
    public Product createProduct(Product item) throws IOException {
        synchronized(products) {
            // We create a new item object because the id field is immutable
            // and we need to assign the a unique id
            int id = java.util.UUID.randomUUID();
            Product newProduct = new Product(,item.getName(), item.getPrice(), item.getQuantity());
            products.put(newProduct.getId(), newProduct);
            save(); // may throw an IOException
            return newProduct;
        }
    }

    /**
    ** {@inheritDoc}
     */
    @Override
    public Product updateProduct(Product product) throws IOException {
        synchronized(products) {
            if (products.containsKey(product.getId()) == false)
                return null;  // product does not exist

            products.put(product.getId(),product);
            save(); // may throw an IOException
            return product;
        }
    }

    /**
    ** {@inheritDoc}
     */
    @Override
    public boolean deleteProduct(int id) throws IOException {
        synchronized(products) {
            if (products.containsKey(id)) {
                products.remove(id);
                return save();
            }
            else
                return false;
        }
    }
}
