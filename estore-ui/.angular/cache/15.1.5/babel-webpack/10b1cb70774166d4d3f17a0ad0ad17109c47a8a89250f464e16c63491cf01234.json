{"ast":null,"code":"import { HEROES } from './mock-heroes';\nimport { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nexport class HeroService {\n  constructor(http, messageService) {\n    this.http = http;\n    this.messageService = messageService;\n    this.heroesUrl = 'http://localhost:8080/heroes';\n  }\n  getHeroes() {\n    const heroes = of(HEROES);\n    this.messageService.add('HeroService: fetched heroes');\n    return heroes;\n  }\n  getHero(id) {\n    // For now, assume that a hero with the specified `id` always exists.\n    // Error handling will be added in the next step of the tutorial.\n    const hero = HEROES.find(h => h.id === id);\n    this.messageService.add(`HeroService: fetched hero id=${id}`);\n    return of(hero);\n  }\n  /** Log a HeroService message with the MessageService */\n  log(message) {\n    this.messageService.add(`HeroService: ${message}`);\n  }\n}\nHeroService.ɵfac = function HeroService_Factory(t) {\n  return new (t || HeroService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n};\nHeroService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HeroService,\n  factory: HeroService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAASA,MAAM,QAAQ,eAAe;AAEtC,SAAqBC,EAAE,QAAQ,MAAM;;;;AASrC,OAAM,MAAOC,WAAW;EAMpBC,YACYC,IAAgB,EAChBC,cAA8B;IAD9B,SAAI,GAAJD,IAAI;IACJ,mBAAc,GAAdC,cAAc;IAJlB,cAAS,GAAG,8BAA8B;EAIJ;EAE9CC,SAAS;IACL,MAAMC,MAAM,GAAGN,EAAE,CAACD,MAAM,CAAC;IACzB,IAAI,CAACK,cAAc,CAACG,GAAG,CAAC,6BAA6B,CAAC;IACtD,OAAOD,MAAM;EACf;EAEFE,OAAO,CAACC,EAAU;IACd;IACA;IACA,MAAMC,IAAI,GAAGX,MAAM,CAACY,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACH,EAAE,KAAKA,EAAE,CAAE;IAC3C,IAAI,CAACL,cAAc,CAACG,GAAG,CAAC,gCAAgCE,EAAE,EAAE,CAAC;IAC7D,OAAOT,EAAE,CAACU,IAAI,CAAC;EACnB;EAEA;EACQG,GAAG,CAACC,OAAe;IACvB,IAAI,CAACV,cAAc,CAACG,GAAG,CAAC,gBAAgBO,OAAO,EAAE,CAAC;EACtD;;AA3BSb,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAc,SAAXd,WAAW;EAAAe,YAFV;AAAM","names":["HEROES","of","HeroService","constructor","http","messageService","getHeroes","heroes","add","getHero","id","hero","find","h","log","message","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\k3din\\my-app\\src\\app\\hero.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { Hero } from './hero';\nimport { HEROES } from './mock-heroes';\n\nimport { Observable, of } from 'rxjs';\n\nimport { MessageService } from './message.service';\n\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HeroService {\n\n    \n\n    private heroesUrl = 'http://localhost:8080/heroes'\n\n    constructor(\n        private http: HttpClient,\n        private messageService: MessageService) { }\n\n    getHeroes(): Observable<Hero[]> {\n        const heroes = of(HEROES);\n        this.messageService.add('HeroService: fetched heroes');\n        return heroes;\n      }\n\n    getHero(id: number): Observable<Hero> {\n        // For now, assume that a hero with the specified `id` always exists.\n        // Error handling will be added in the next step of the tutorial.\n        const hero = HEROES.find(h => h.id === id)!;\n        this.messageService.add(`HeroService: fetched hero id=${id}`);\n        return of(hero);\n    }\n\n    /** Log a HeroService message with the MessageService */\n    private log(message: string) {\n        this.messageService.add(`HeroService: ${message}`);\n    }\n\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}