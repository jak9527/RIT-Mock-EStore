{"ast":null,"code":"import { of } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nexport class CurrentUserService {\n  constructor(http, messageService) {\n    this.http = http;\n    this.messageService = messageService;\n    this.usersUrl = 'http://localhost:8080/currentUser';\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  /** GET current user. Will 404 if id not found */\n  getCurrentUser() {\n    return this.http.get(this.usersUrl).pipe(tap(_ => this.log(`fetched current user`)), catchError(this.handleError(`getCurrentUser`)));\n  }\n  /**\r\n  * Handle Http operation that failed.\r\n  * Let the app continue.\r\n  *\r\n   * @param operation - name of the operation that failed\r\n  * @param result - optional value to return as the observable result\r\n   */\n  handleError(operation = 'operation', result) {\n    return error => {\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n  /** Log a UserService message with the MessageService */\n  log(message) {\n    this.messageService.add(`UserService: ${message}`);\n  }\n  /** POST: add a new user to the server */\n  setCurrentUser(user) {\n    // this.log(user.username);\n    return this.http.post(this.usersUrl, user, this.httpOptions).pipe(tap(newUser => this.log(`set current user w/ id=${newUser.id}`)), catchError(this.handleError('setCurrentUser')));\n  }\n  /** Delete current user. Will 404 if id not found */\n  deleteCurrentUser() {\n    return this.http.delete(this.usersUrl).pipe(tap(_ => this.log(`deleted current user`)), catchError(this.handleError(`deleteCurrentUser`)));\n  }\n}\nCurrentUserService.ɵfac = function CurrentUserService_Factory(t) {\n  return new (t || CurrentUserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n};\nCurrentUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CurrentUserService,\n  factory: CurrentUserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAIA,SAAqBA,EAAE,QAAQ,MAAM;AAIrC,SAAqBC,WAAW,QAAQ,sBAAsB;AAC9D,SAASC,UAAU,EAAOC,GAAG,QAAQ,gBAAgB;;;;AAKrD,OAAM,MAAOC,kBAAkB;EAI3BC,YACYC,IAAgB,EAChBC,cAA8B;IAD9B,SAAI,GAAJD,IAAI;IACJ,mBAAc,GAAdC,cAAc;IAJlB,aAAQ,GAAG,mCAAmC;IAwCtD,gBAAW,GAAG;MACVC,OAAO,EAAE,IAAIP,WAAW,CAAC;QAAE,cAAc,EAAE;MAAkB,CAAE;KAChE;EAtC2C;EAE9C;EACAQ,cAAc;IACV,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAO,IAAI,CAACC,QAAQ,CAAC,CAACC,IAAI,CAC1CT,GAAG,CAACU,CAAC,IAAI,IAAI,CAACC,GAAG,CAAC,sBAAsB,CAAC,CAAC,EAC1CZ,UAAU,CAAC,IAAI,CAACa,WAAW,CAAO,gBAAgB,CAAC,CAAC,CACvD;EACL;EAEA;;;;;;;EAOQA,WAAW,CAAIC,SAAS,GAAG,WAAW,EAAEC,MAAU;IACtD,OAAQC,KAAU,IAAmB;MAEhC;MACAC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC,CAAC;MAEtB;MACD,IAAI,CAACJ,GAAG,CAAC,GAAGE,SAAS,YAAYE,KAAK,CAACE,OAAO,EAAE,CAAC;MAEjD;MACA,OAAOpB,EAAE,CAACiB,MAAW,CAAC;IAC1B,CAAC;EACL;EAEA;EACQH,GAAG,CAACM,OAAe;IACvB,IAAI,CAACb,cAAc,CAACc,GAAG,CAAC,gBAAgBD,OAAO,EAAE,CAAC;EACtD;EAMA;EACAE,cAAc,CAACC,IAAU;IACrB;IACF,OAAO,IAAI,CAACjB,IAAI,CAACkB,IAAI,CAAO,IAAI,CAACb,QAAQ,EAAEY,IAAI,EAAE,IAAI,CAACE,WAAW,CAAC,CAACb,IAAI,CACrET,GAAG,CAAEuB,OAAa,IAAK,IAAI,CAACZ,GAAG,CAAC,0BAA0BY,OAAO,CAACC,EAAE,EAAE,CAAC,CAAC,EACxEzB,UAAU,CAAC,IAAI,CAACa,WAAW,CAAO,gBAAgB,CAAC,CAAC,CACrD;EACH;EAEA;EACAa,iBAAiB;IACb,OAAO,IAAI,CAACtB,IAAI,CAACuB,MAAM,CAAO,IAAI,CAAClB,QAAQ,CAAC,CAACC,IAAI,CAC7CT,GAAG,CAACU,CAAC,IAAI,IAAI,CAACC,GAAG,CAAC,sBAAsB,CAAC,CAAC,EAC1CZ,UAAU,CAAC,IAAI,CAACa,WAAW,CAAO,mBAAmB,CAAC,CAAC,CAC1D;EACL;;AA7DSX,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;SAAlBA,kBAAkB;EAAA0B,SAAlB1B,kBAAkB;EAAA2B,YAFjB;AAAM","names":["of","HttpHeaders","catchError","tap","CurrentUserService","constructor","http","messageService","headers","getCurrentUser","get","usersUrl","pipe","_","log","handleError","operation","result","error","console","message","add","setCurrentUser","user","post","httpOptions","newUser","id","deleteCurrentUser","delete","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\broke\\Desktop\\SWEN-261\\team-project-2225-swen-261-06-g-ritgaragesale\\estore-ui\\src\\app\\currentUser.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\nimport { User } from './user';\r\n\r\nimport { Observable, of } from 'rxjs';\r\n\r\nimport { MessageService } from './message.service';\r\n\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CurrentUserService {\r\n\r\n    private usersUrl = 'http://localhost:8080/currentUser'\r\n\r\n    constructor(\r\n        private http: HttpClient,\r\n        private messageService: MessageService) { }\r\n\r\n    /** GET current user. Will 404 if id not found */\r\n    getCurrentUser(): Observable<User> {\r\n        return this.http.get<User>(this.usersUrl).pipe(\r\n            tap(_ => this.log(`fetched current user`)),\r\n            catchError(this.handleError<User>(`getCurrentUser`))\r\n        );\r\n    }\r\n\r\n    /**\r\n    * Handle Http operation that failed.\r\n    * Let the app continue.\r\n    *\r\n     * @param operation - name of the operation that failed\r\n    * @param result - optional value to return as the observable result\r\n     */\r\n    private handleError<T>(operation = 'operation', result?: T) {\r\n        return (error: any): Observable<T> => {\r\n  \r\n             // TODO: send the error to remote logging infrastructure\r\n             console.error(error); // log to console instead\r\n  \r\n             // TODO: better job of transforming error for user consumption\r\n            this.log(`${operation} failed: ${error.message}`);\r\n  \r\n            // Let the app keep running by returning an empty result.\r\n            return of(result as T);\r\n        };\r\n    }\r\n\r\n    /** Log a UserService message with the MessageService */\r\n    private log(message: string) {\r\n        this.messageService.add(`UserService: ${message}`);\r\n    }\r\n\r\n    httpOptions = {\r\n        headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n      };\r\n\r\n    /** POST: add a new user to the server */\r\n    setCurrentUser(user: User): Observable<User> {\r\n        // this.log(user.username);\r\n      return this.http.post<User>(this.usersUrl, user, this.httpOptions).pipe(\r\n        tap((newUser: User) => this.log(`set current user w/ id=${newUser.id}`)),\r\n        catchError(this.handleError<User>('setCurrentUser'))\r\n      );\r\n    }\r\n\r\n    /** Delete current user. Will 404 if id not found */\r\n    deleteCurrentUser(): Observable<User> {\r\n        return this.http.delete<User>(this.usersUrl).pipe(\r\n            tap(_ => this.log(`deleted current user`)),\r\n            catchError(this.handleError<User>(`deleteCurrentUser`))\r\n        );\r\n    }\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}