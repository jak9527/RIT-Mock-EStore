{"ast":null,"code":"import { of } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nexport class UserService {\n  constructor(http, messageService) {\n    this.http = http;\n    this.messageService = messageService;\n    this.usersUrl = 'http://localhost:8080/users';\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  /** GET products from the server */\n  getUsers() {\n    return this.http.get(this.usersUrl).pipe(tap(_ => this.log('fetched users')), catchError(this.handleError('getUsers', [])));\n  }\n  /** GET product by id. Will 404 if id not found */\n  getUser(id) {\n    const url = `${this.usersUrl}/${id}`;\n    return this.http.get(url).pipe(tap(_ => this.log(`fetched user id=${id}`)), catchError(this.handleError(`getProduct id=${id}`)));\n  }\n  /**\r\n  * Handle Http operation that failed.\r\n  * Let the app continue.\r\n  *\r\n   * @param operation - name of the operation that failed\r\n  * @param result - optional value to return as the observable result\r\n   */\n  handleError(operation = 'operation', result) {\n    return error => {\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n  /** Log a UserService message with the MessageService */\n  log(message) {\n    this.messageService.add(`UserService: ${message}`);\n  }\n  /** POST: add a new user to the server */\n  addUser(user) {\n    return this.http.post(this.usersUrl, user, this.httpOptions).pipe(tap(newUser => this.log(`added user w/ id=${newUser.id}`)), catchError(this.handleError('addUser')));\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAIA,SAAqBA,EAAE,QAAQ,MAAM;AAIrC,SAAqBC,WAAW,QAAQ,sBAAsB;AAC9D,SAASC,UAAU,EAAOC,GAAG,QAAQ,gBAAgB;;;;AAKrD,OAAM,MAAOC,WAAW;EAIpBC,YACYC,IAAgB,EAChBC,cAA8B;IAD9B,SAAI,GAAJD,IAAI;IACJ,mBAAc,GAAdC,cAAc;IAJlB,aAAQ,GAAG,6BAA6B;IAmDhD,gBAAW,GAAG;MACVC,OAAO,EAAE,IAAIP,WAAW,CAAC;QAAE,cAAc,EAAE;MAAkB,CAAE;KAChE;EAjD2C;EAG9C;EACAQ,QAAQ;IACJ,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAS,IAAI,CAACC,QAAQ,CAAC,CACtCC,IAAI,CACLT,GAAG,CAACU,CAAC,IAAI,IAAI,CAACC,GAAG,CAAC,eAAe,CAAC,CAAC,EACnCZ,UAAU,CAAC,IAAI,CAACa,WAAW,CAAS,UAAU,EAAE,EAAE,CAAC,CAAC,CACvD;EACL;EAEA;EACAC,OAAO,CAACC,EAAU;IACd,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACP,QAAQ,IAAIM,EAAE,EAAE;IACpC,OAAO,IAAI,CAACX,IAAI,CAACI,GAAG,CAAOQ,GAAG,CAAC,CAACN,IAAI,CAChCT,GAAG,CAACU,CAAC,IAAI,IAAI,CAACC,GAAG,CAAC,mBAAmBG,EAAE,EAAE,CAAC,CAAC,EAC3Cf,UAAU,CAAC,IAAI,CAACa,WAAW,CAAO,iBAAiBE,EAAE,EAAE,CAAC,CAAC,CAC5D;EACL;EAEA;;;;;;;EAOQF,WAAW,CAAII,SAAS,GAAG,WAAW,EAAEC,MAAU;IACtD,OAAQC,KAAU,IAAmB;MAEhC;MACAC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC,CAAC;MAEtB;MACD,IAAI,CAACP,GAAG,CAAC,GAAGK,SAAS,YAAYE,KAAK,CAACE,OAAO,EAAE,CAAC;MAEjD;MACA,OAAOvB,EAAE,CAACoB,MAAW,CAAC;IAC1B,CAAC;EACL;EAEA;EACQN,GAAG,CAACS,OAAe;IACvB,IAAI,CAAChB,cAAc,CAACiB,GAAG,CAAC,gBAAgBD,OAAO,EAAE,CAAC;EACtD;EAMA;EACAE,OAAO,CAACC,IAAU;IAChB,OAAO,IAAI,CAACpB,IAAI,CAACqB,IAAI,CAAO,IAAI,CAAChB,QAAQ,EAAEe,IAAI,EAAE,IAAI,CAACE,WAAW,CAAC,CAAChB,IAAI,CACrET,GAAG,CAAE0B,OAAa,IAAK,IAAI,CAACf,GAAG,CAAC,oBAAoBe,OAAO,CAACZ,EAAE,EAAE,CAAC,CAAC,EAClEf,UAAU,CAAC,IAAI,CAACa,WAAW,CAAO,SAAS,CAAC,CAAC,CAC9C;EACH;;AA/DSX,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA0B,SAAX1B,WAAW;EAAA2B,YAFV;AAAM","names":["of","HttpHeaders","catchError","tap","UserService","constructor","http","messageService","headers","getUsers","get","usersUrl","pipe","_","log","handleError","getUser","id","url","operation","result","error","console","message","add","addUser","user","post","httpOptions","newUser","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\broke\\Desktop\\SWEN-261\\team-project-2225-swen-261-06-g-ritgaragesale\\estore-ui\\src\\app\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\nimport { User } from './user';\r\n\r\nimport { Observable, of } from 'rxjs';\r\n\r\nimport { MessageService } from './message.service';\r\n\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService {\r\n\r\n    private usersUrl = 'http://localhost:8080/users'\r\n\r\n    constructor(\r\n        private http: HttpClient,\r\n        private messageService: MessageService) { }\r\n\r\n\r\n    /** GET products from the server */\r\n    getUsers(): Observable<User[]> {\r\n        return this.http.get<User[]>(this.usersUrl)\r\n            .pipe(\r\n            tap(_ => this.log('fetched users')),\r\n            catchError(this.handleError<User[]>('getUsers', []))\r\n        );\r\n    }\r\n\r\n    /** GET product by id. Will 404 if id not found */\r\n    getUser(id: number): Observable<User> {\r\n        const url = `${this.usersUrl}/${id}`;\r\n        return this.http.get<User>(url).pipe(\r\n            tap(_ => this.log(`fetched user id=${id}`)),\r\n            catchError(this.handleError<User>(`getProduct id=${id}`))\r\n        );\r\n    }\r\n\r\n    /**\r\n    * Handle Http operation that failed.\r\n    * Let the app continue.\r\n    *\r\n     * @param operation - name of the operation that failed\r\n    * @param result - optional value to return as the observable result\r\n     */\r\n    private handleError<T>(operation = 'operation', result?: T) {\r\n        return (error: any): Observable<T> => {\r\n  \r\n             // TODO: send the error to remote logging infrastructure\r\n             console.error(error); // log to console instead\r\n  \r\n             // TODO: better job of transforming error for user consumption\r\n            this.log(`${operation} failed: ${error.message}`);\r\n  \r\n            // Let the app keep running by returning an empty result.\r\n            return of(result as T);\r\n        };\r\n    }\r\n\r\n    /** Log a UserService message with the MessageService */\r\n    private log(message: string) {\r\n        this.messageService.add(`UserService: ${message}`);\r\n    }\r\n\r\n    httpOptions = {\r\n        headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n      };\r\n\r\n    /** POST: add a new user to the server */\r\n    addUser(user: User): Observable<User> {\r\n      return this.http.post<User>(this.usersUrl, user, this.httpOptions).pipe(\r\n        tap((newUser: User) => this.log(`added user w/ id=${newUser.id}`)),\r\n        catchError(this.handleError<User>('addUser'))\r\n      );\r\n    }\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}