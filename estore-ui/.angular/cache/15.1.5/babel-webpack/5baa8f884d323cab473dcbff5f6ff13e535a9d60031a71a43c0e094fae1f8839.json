{"ast":null,"code":"import { of } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nexport class ProductService {\n  constructor(http, messageService) {\n    this.http = http;\n    this.messageService = messageService;\n    this.productsUrl = 'http://localhost:8080/inventory';\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  /** GET products from the server */\n  getProducts() {\n    return this.http.get(this.productsUrl).pipe(tap(_ => this.log('fetched products')), catchError(this.handleError('getProducts', [])));\n  }\n  /** GET products by id. Will 404 if id not found */\n  getProduct(id) {\n    const url = `${this.productsUrl}/${id}`;\n    return this.http.get(url).pipe(tap(_ => this.log(`fetched product id=${id}`)), catchError(this.handleError(`getProduct id=${id}`)));\n  }\n  /**\r\n  * Handle Http operation that failed.\r\n  * Let the app continue.\r\n  *\r\n   * @param operation - name of the operation that failed\r\n  * @param result - optional value to return as the observable result\r\n   */\n  handleError(operation = 'operation', result) {\n    return error => {\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n  /** Log a HeroService message with the MessageService */\n  log(message) {\n    this.messageService.add(`HeroService: ${message}`);\n  }\n  /** PUT: update the hero on the server */\n  updateHero(hero) {\n    return this.http.put(this.productsUrl, hero, this.httpOptions).pipe(tap(_ => this.log(`updated hero id=${hero.id}`)), catchError(this.handleError('updateHero')));\n  }\n  /** POST: add a new hero to the server */\n  addHero(hero) {\n    return this.http.post(this.productsUrl, hero, this.httpOptions).pipe(tap(newHero => this.log(`added hero w/ id=${newHero.id}`)), catchError(this.handleError('addHero')));\n  }\n  /** DELETE: delete the hero from the server */\n  deleteHero(id) {\n    const url = `${this.productsUrl}/${id}`;\n    return this.http.delete(url, this.httpOptions).pipe(tap(_ => this.log(`deleted hero id=${id}`)), catchError(this.handleError('deleteHero')));\n  }\n  /* GET heroes whose name contains search term */\n  searchHeroes(term) {\n    if (!term.trim()) {\n      // if not search term, return empty hero array.\n      return of([]);\n    }\n    return this.http.get(`${this.productsUrl}/?name=${term}`).pipe(tap(x => x.length ? this.log(`found heroes matching \"${term}\"`) : this.log(`no heroes matching \"${term}\"`)), catchError(this.handleError('searchHeroes', [])));\n  }\n}\nProductService.ɵfac = function ProductService_Factory(t) {\n  return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n};\nProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductService,\n  factory: ProductService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["of","HttpHeaders","catchError","tap","ProductService","constructor","http","messageService","headers","getProducts","get","productsUrl","pipe","_","log","handleError","getProduct","id","url","operation","result","error","console","message","add","updateHero","hero","put","httpOptions","addHero","post","newHero","deleteHero","delete","searchHeroes","term","trim","x","length","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\k3din\\SWENProject\\team-project-2225-swen-261-06-g-ritgaragesale\\estore-ui\\src\\app\\hero.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { Product } from './product';\n\nimport { Observable, of } from 'rxjs';\n\nimport { MessageService } from './message.service';\n\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { catchError, map, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductService {\n\n    private productsUrl = 'http://localhost:8080/inventory'\n\n    constructor(\n        private http: HttpClient,\n        private messageService: MessageService) { }\n\n\n    /** GET products from the server */\n    getProducts(): Observable<Product[]> {\n        return this.http.get<Product[]>(this.productsUrl)\n            .pipe(\n            tap(_ => this.log('fetched products')),\n            catchError(this.handleError<Product[]>('getProducts', []))\n        );\n    }\n\n    /** GET products by id. Will 404 if id not found */\n    getProduct(id: number): Observable<Product> {\n        const url = `${this.productsUrl}/${id}`;\n        return this.http.get<Product>(url).pipe(\n            tap(_ => this.log(`fetched product id=${id}`)),\n            catchError(this.handleError<Product>(`getProduct id=${id}`))\n        );\n    }\n\n    /**\n    * Handle Http operation that failed.\n    * Let the app continue.\n    *\n     * @param operation - name of the operation that failed\n    * @param result - optional value to return as the observable result\n     */\n    private handleError<T>(operation = 'operation', result?: T) {\n        return (error: any): Observable<T> => {\n  \n             // TODO: send the error to remote logging infrastructure\n             console.error(error); // log to console instead\n  \n             // TODO: better job of transforming error for user consumption\n            this.log(`${operation} failed: ${error.message}`);\n  \n            // Let the app keep running by returning an empty result.\n            return of(result as T);\n        };\n    }\n\n    /** Log a HeroService message with the MessageService */\n    private log(message: string) {\n        this.messageService.add(`HeroService: ${message}`);\n    }\n\n    /** PUT: update the hero on the server */\n    updateHero(hero: Product): Observable<any> {\n        return this.http.put(this.productsUrl, hero, this.httpOptions).pipe(\n        tap(_ => this.log(`updated hero id=${hero.id}`)),\n        catchError(this.handleError<any>('updateHero'))\n        );\n    }\n\n    httpOptions = {\n        headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n      };\n\n    /** POST: add a new hero to the server */\n    addHero(hero: Product): Observable<Product> {\n        return this.http.post<Product>(this.productsUrl, hero, this.httpOptions).pipe(\n        tap((newHero: Product) => this.log(`added hero w/ id=${newHero.id}`)),\n        catchError(this.handleError<Product>('addHero'))\n        );\n    }\n\n    /** DELETE: delete the hero from the server */\n    deleteHero(id: number): Observable<Product> {\n        const url = `${this.productsUrl}/${id}`;\n  \n        return this.http.delete<Product>(url, this.httpOptions).pipe(\n        tap(_ => this.log(`deleted hero id=${id}`)),\n        catchError(this.handleError<Product>('deleteHero'))\n        );\n    }\n\n    /* GET heroes whose name contains search term */\n    searchHeroes(term: string): Observable<Product[]> {\n        if (!term.trim()) {\n            // if not search term, return empty hero array.\n            return of([]);\n        }\n        return this.http.get<Product[]>(`${this.productsUrl}/?name=${term}`).pipe(\n        tap(x => x.length ?\n            this.log(`found heroes matching \"${term}\"`) :\n            this.log(`no heroes matching \"${term}\"`)),\n        catchError(this.handleError<Product[]>('searchHeroes', []))\n        );\n    }\n\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}