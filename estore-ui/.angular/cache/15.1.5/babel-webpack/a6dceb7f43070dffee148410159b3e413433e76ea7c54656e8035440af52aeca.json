{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class UserUpdateService {\n  constructor() {\n    this.subjectName = new Subject(); //need to create a subject\n  }\n\n  sendUpdate(message) {\n    this.subjectName.next({\n      text: message\n    }); //next() will feed the value in Subject\n  }\n\n  getUpdate() {\n    return this.subjectName.asObservable(); //it returns as an observable to which the receiver funtion will subscribe\n  }\n}\n\nUserUpdateService.ɵfac = function UserUpdateService_Factory(t) {\n  return new (t || UserUpdateService)();\n};\nUserUpdateService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserUpdateService,\n  factory: UserUpdateService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAqBA,OAAO,QAAQ,MAAM;;AAI1C,OAAM,MAAOC,iBAAiB;EAD9BC;IAEY,gBAAW,GAAG,IAAIF,OAAO,EAAO,CAAC,CAAC;;;EAE1CG,UAAU,CAACC,OAAe;IACtB,IAAI,CAACC,WAAW,CAACC,IAAI,CAAC;MAAEC,IAAI,EAAEH;IAAO,CAAE,CAAC,CAAC,CAAC;EAC9C;;EAEAI,SAAS;IACL,OAAO,IAAI,CAACH,WAAW,CAACI,YAAY,EAAE,CAAC,CAAC;EAC5C;;;AATSR,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;SAAjBA,iBAAiB;EAAAS,SAAjBT,iBAAiB;EAAAU,YADJ;AAAM","names":["Subject","UserUpdateService","constructor","sendUpdate","message","subjectName","next","text","getUpdate","asObservable","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\broke\\Desktop\\SWEN-261\\team-project-2225-swen-261-06-g-ritgaragesale\\estore-ui\\src\\app\\userUpdate.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { User } from './user';\r\n    \r\n@Injectable({ providedIn: 'root' })\r\nexport class UserUpdateService {\r\n    private subjectName = new Subject<any>(); //need to create a subject\r\n    \r\n    sendUpdate(message: string) { //the component that wants to update something, calls this fn\r\n        this.subjectName.next({ text: message }); //next() will feed the value in Subject\r\n    }\r\n    \r\n    getUpdate(): Observable<any> { //the receiver component calls this function \r\n        return this.subjectName.asObservable(); //it returns as an observable to which the receiver funtion will subscribe\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}