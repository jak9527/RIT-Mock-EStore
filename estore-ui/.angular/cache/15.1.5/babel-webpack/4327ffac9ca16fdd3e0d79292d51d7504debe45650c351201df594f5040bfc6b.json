{"ast":null,"code":"import { of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nexport class HeroService {\n  constructor(http, messageService) {\n    this.http = http;\n    this.messageService = messageService;\n    this.heroesUrl = 'api/heroes'; // URL to web api\n  }\n  /** GET heroes from the server */\n  getHeroes() {\n    return this.http.get(this.heroesUrl).pipe(tap(_ => this.log('fetched heroes')), catchError(this.handleError('getHeroes', [])));\n  }\n  /** GET hero by id. Will 404 if id not found */\n  getHero(id) {\n    const url = `${this.heroesUrl}/${id}`;\n    return this.http.get(url).pipe(tap(_ => this.log(`fetched hero id=${id}`)), catchError(this.handleError(`getHero id=${id}`)));\n  }\n  /**\r\n  * Handle Http operation that failed.\r\n  * Let the app continue.\r\n  *\r\n   * @param operation - name of the operation that failed\r\n  * @param result - optional value to return as the observable result\r\n   */\n  handleError(operation = 'operation', result) {\n    return error => {\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n  /** Log a HeroService message with the MessageService */\n  log(message) {\n    this.messageService.add(`HeroService: ${message}`);\n  }\n}\nHeroService.ɵfac = function HeroService_Factory(t) {\n  return new (t || HeroService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n};\nHeroService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HeroService,\n  factory: HeroService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAKA,SAAqBA,EAAE,QAAQ,MAAM;AAKrC,SAASC,UAAU,EAAOC,GAAG,QAAQ,gBAAgB;;;;AAKrD,OAAM,MAAOC,WAAW;EAIpBC,YACYC,IAAgB,EAChBC,cAA8B;IAD9B,SAAI,GAAJD,IAAI;IACJ,mBAAc,GAAdC,cAAc;IAJlB,cAAS,GAAG,YAAY,CAAC,CAAE;EAIW;EAG9C;EACAC,SAAS;IACL,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAS,IAAI,CAACC,SAAS,CAAC,CACvCC,IAAI,CACLR,GAAG,CAACS,CAAC,IAAI,IAAI,CAACC,GAAG,CAAC,gBAAgB,CAAC,CAAC,EACpCX,UAAU,CAAC,IAAI,CAACY,WAAW,CAAS,WAAW,EAAE,EAAE,CAAC,CAAC,CACxD;EACL;EAEA;EACAC,OAAO,CAACC,EAAU;IACd,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACP,SAAS,IAAIM,EAAE,EAAE;IACzC,OAAO,IAAI,CAACV,IAAI,CAACG,GAAG,CAAOQ,GAAG,CAAC,CAACN,IAAI,CAClCR,GAAG,CAACS,CAAC,IAAI,IAAI,CAACC,GAAG,CAAC,mBAAmBG,EAAE,EAAE,CAAC,CAAC,EAC3Cd,UAAU,CAAC,IAAI,CAACY,WAAW,CAAO,cAAcE,EAAE,EAAE,CAAC,CAAC,CACvD;EACH;EAEE;;;;;;;EAOQF,WAAW,CAAII,SAAS,GAAG,WAAW,EAAEC,MAAU;IACtD,OAAQC,KAAU,IAAmB;MAEhC;MACAC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC,CAAC;MAEtB;MACD,IAAI,CAACP,GAAG,CAAC,GAAGK,SAAS,YAAYE,KAAK,CAACE,OAAO,EAAE,CAAC;MAEjD;MACA,OAAOrB,EAAE,CAACkB,MAAW,CAAC;IAC1B,CAAC;EACL;EAEA;EACQN,GAAG,CAACS,OAAe;IACvB,IAAI,CAACf,cAAc,CAACgB,GAAG,CAAC,gBAAgBD,OAAO,EAAE,CAAC;EACtD;;AAnDSlB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAoB,SAAXpB,WAAW;EAAAqB,YAFV;AAAM","names":["of","catchError","tap","HeroService","constructor","http","messageService","getHeroes","get","heroesUrl","pipe","_","log","handleError","getHero","id","url","operation","result","error","console","message","add","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\k3din\\my-app\\src\\app\\hero.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { Hero } from './hero';\nimport { HEROES } from './mock-heroes';\n\nimport { Observable, of } from 'rxjs';\n\nimport { MessageService } from './message.service';\n\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { catchError, map, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HeroService {\n\n    private heroesUrl = 'api/heroes';  // URL to web api\n\n    constructor(\n        private http: HttpClient,\n        private messageService: MessageService) { }\n\n\n    /** GET heroes from the server */\n    getHeroes(): Observable<Hero[]> {\n        return this.http.get<Hero[]>(this.heroesUrl)\n            .pipe(\n            tap(_ => this.log('fetched heroes')),\n            catchError(this.handleError<Hero[]>('getHeroes', []))\n        );\n    }\n\n    /** GET hero by id. Will 404 if id not found */\n    getHero(id: number): Observable<Hero> {\n        const url = `${this.heroesUrl}/${id}`;\n    return this.http.get<Hero>(url).pipe(\n      tap(_ => this.log(`fetched hero id=${id}`)),\n      catchError(this.handleError<Hero>(`getHero id=${id}`))\n    );\n  }\n\n    /**\n    * Handle Http operation that failed.\n    * Let the app continue.\n    *\n     * @param operation - name of the operation that failed\n    * @param result - optional value to return as the observable result\n     */\n    private handleError<T>(operation = 'operation', result?: T) {\n        return (error: any): Observable<T> => {\n  \n             // TODO: send the error to remote logging infrastructure\n             console.error(error); // log to console instead\n  \n             // TODO: better job of transforming error for user consumption\n            this.log(`${operation} failed: ${error.message}`);\n  \n            // Let the app keep running by returning an empty result.\n            return of(result as T);\n        };\n    }\n\n    /** Log a HeroService message with the MessageService */\n    private log(message: string) {\n        this.messageService.add(`HeroService: ${message}`);\n    }\n\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}