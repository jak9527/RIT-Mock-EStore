{"ast":null,"code":"import { of } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nexport class HeroService {\n  constructor(http, messageService) {\n    this.http = http;\n    this.messageService = messageService;\n    this.heroesUrl = 'http://localhost:8080/inventory';\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  /** GET heroes from the server */\n  getHeroes() {\n    return this.http.get(this.heroesUrl).pipe(tap(_ => this.log('fetched heroes')), catchError(this.handleError('getHeroes', [])));\n  }\n  /** GET hero by id. Will 404 if id not found */\n  getHero(id) {\n    const url = `${this.heroesUrl}/${id}`;\n    return this.http.get(url).pipe(tap(_ => this.log(`fetched hero id=${id}`)), catchError(this.handleError(`getHero id=${id}`)));\n  }\n  /**\r\n  * Handle Http operation that failed.\r\n  * Let the app continue.\r\n  *\r\n   * @param operation - name of the operation that failed\r\n  * @param result - optional value to return as the observable result\r\n   */\n  handleError(operation = 'operation', result) {\n    return error => {\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n  /** Log a HeroService message with the MessageService */\n  log(message) {\n    this.messageService.add(`HeroService: ${message}`);\n  }\n  /** PUT: update the hero on the server */\n  updateHero(hero) {\n    return this.http.put(this.heroesUrl, hero, this.httpOptions).pipe(tap(_ => this.log(`updated hero id=${hero.id}`)), catchError(this.handleError('updateHero')));\n  }\n  /** POST: add a new hero to the server */\n  addHero(hero) {\n    return this.http.post(this.heroesUrl, hero, this.httpOptions).pipe(tap(newHero => this.log(`added hero w/ id=${newHero.id}`)), catchError(this.handleError('addHero')));\n  }\n  /** DELETE: delete the hero from the server */\n  deleteHero(id) {\n    const url = `${this.heroesUrl}/${id}`;\n    return this.http.delete(url, this.httpOptions).pipe(tap(_ => this.log(`deleted hero id=${id}`)), catchError(this.handleError('deleteHero')));\n  }\n  /* GET heroes whose name contains search term */\n  searchHeroes(term) {\n    if (!term.trim()) {\n      // if not search term, return empty hero array.\n      return of([]);\n    }\n    return this.http.get(`${this.heroesUrl}/?name=${term}`).pipe(tap(x => x.length ? this.log(`found heroes matching \"${term}\"`) : this.log(`no heroes matching \"${term}\"`)), catchError(this.handleError('searchHeroes', [])));\n  }\n}\nHeroService.ɵfac = function HeroService_Factory(t) {\n  return new (t || HeroService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n};\nHeroService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HeroService,\n  factory: HeroService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["of","HttpHeaders","catchError","tap","HeroService","constructor","http","messageService","headers","getHeroes","get","heroesUrl","pipe","_","log","handleError","getHero","id","url","operation","result","error","console","message","add","updateHero","hero","put","httpOptions","addHero","post","newHero","deleteHero","delete","searchHeroes","term","trim","x","length","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\emanm\\SWEN\\E-Store\\estore-ui\\src\\app\\hero.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\nimport { Hero } from './hero';\r\nimport { HEROES } from './mock-heroes';\r\n\r\nimport { Observable, of } from 'rxjs';\r\n\r\nimport { MessageService } from './message.service';\r\n\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HeroService {\r\n\r\n    private heroesUrl = 'http://localhost:8080/inventory'\r\n\r\n    constructor(\r\n        private http: HttpClient,\r\n        private messageService: MessageService) { }\r\n\r\n\r\n    /** GET heroes from the server */\r\n    getHeroes(): Observable<Hero[]> {\r\n        return this.http.get<Hero[]>(this.heroesUrl)\r\n            .pipe(\r\n            tap(_ => this.log('fetched heroes')),\r\n            catchError(this.handleError<Hero[]>('getHeroes', []))\r\n        );\r\n    }\r\n\r\n    /** GET hero by id. Will 404 if id not found */\r\n    getHero(id: number): Observable<Hero> {\r\n        const url = `${this.heroesUrl}/${id}`;\r\n        return this.http.get<Hero>(url).pipe(\r\n            tap(_ => this.log(`fetched hero id=${id}`)),\r\n            catchError(this.handleError<Hero>(`getHero id=${id}`))\r\n        );\r\n    }\r\n\r\n    /**\r\n    * Handle Http operation that failed.\r\n    * Let the app continue.\r\n    *\r\n     * @param operation - name of the operation that failed\r\n    * @param result - optional value to return as the observable result\r\n     */\r\n    private handleError<T>(operation = 'operation', result?: T) {\r\n        return (error: any): Observable<T> => {\r\n  \r\n             // TODO: send the error to remote logging infrastructure\r\n             console.error(error); // log to console instead\r\n  \r\n             // TODO: better job of transforming error for user consumption\r\n            this.log(`${operation} failed: ${error.message}`);\r\n  \r\n            // Let the app keep running by returning an empty result.\r\n            return of(result as T);\r\n        };\r\n    }\r\n\r\n    /** Log a HeroService message with the MessageService */\r\n    private log(message: string) {\r\n        this.messageService.add(`HeroService: ${message}`);\r\n    }\r\n\r\n    /** PUT: update the hero on the server */\r\n    updateHero(hero: Hero): Observable<any> {\r\n        return this.http.put(this.heroesUrl, hero, this.httpOptions).pipe(\r\n        tap(_ => this.log(`updated hero id=${hero.id}`)),\r\n        catchError(this.handleError<any>('updateHero'))\r\n        );\r\n    }\r\n\r\n    httpOptions = {\r\n        headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n      };\r\n\r\n    /** POST: add a new hero to the server */\r\n    addHero(hero: Hero): Observable<Hero> {\r\n        return this.http.post<Hero>(this.heroesUrl, hero, this.httpOptions).pipe(\r\n        tap((newHero: Hero) => this.log(`added hero w/ id=${newHero.id}`)),\r\n        catchError(this.handleError<Hero>('addHero'))\r\n        );\r\n    }\r\n\r\n    /** DELETE: delete the hero from the server */\r\n    deleteHero(id: number): Observable<Hero> {\r\n        const url = `${this.heroesUrl}/${id}`;\r\n  \r\n        return this.http.delete<Hero>(url, this.httpOptions).pipe(\r\n        tap(_ => this.log(`deleted hero id=${id}`)),\r\n        catchError(this.handleError<Hero>('deleteHero'))\r\n        );\r\n    }\r\n\r\n    /* GET heroes whose name contains search term */\r\n    searchHeroes(term: string): Observable<Hero[]> {\r\n        if (!term.trim()) {\r\n            // if not search term, return empty hero array.\r\n            return of([]);\r\n        }\r\n        return this.http.get<Hero[]>(`${this.heroesUrl}/?name=${term}`).pipe(\r\n        tap(x => x.length ?\r\n            this.log(`found heroes matching \"${term}\"`) :\r\n            this.log(`no heroes matching \"${term}\"`)),\r\n        catchError(this.handleError<Hero[]>('searchHeroes', []))\r\n        );\r\n    }\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}