{"ast":null,"code":"import { of } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nexport class CartService {\n  constructor(http, messageService) {\n    this.http = http;\n    this.messageService = messageService;\n    this.cartsUrl = 'http://localhost:8080/carts';\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  /** GET cart by id. Will 404 if id not found */\n  getCart(id) {\n    const url = `${this.cartsUrl}/${id}`;\n    return this.http.get(url).pipe(tap(_ => this.log(`fetched cart id=${id}`)), catchError(this.handleError(`getCart id=${id}`)));\n  }\n  /**\r\n  * Handle Http operation that failed.\r\n  * Let the app continue.\r\n  *\r\n   * @param operation - name of the operation that failed\r\n  * @param result - optional value to return as the observable result\r\n   */\n  handleError(operation = 'operation', result) {\n    return error => {\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n  /** Log a UserService message with the MessageService */\n  log(message) {\n    this.messageService.add(`UserService: ${message}`);\n  }\n  /** POST: add a new cart to the server */\n  addCart(cart) {\n    return this.http.post(this.cartsUrl, cart, this.httpOptions).pipe(tap(newCart => this.log(`added cart w/ id=${newCart.id}`)), catchError(this.handleError('addCart')));\n  }\n  /** PUT: add a product to a cart on the server */\n  addProductToCart(cId, product) {\n    product.quantity = 1;\n    return this.http.put(this.cartsUrl + `/${cId}`, product, this.httpOptions).pipe(tap(_ => this.log(`added product with id ${product.id} to cart w/ id=${cId}`)), catchError(this.handleError('addProductToCart')));\n  }\n  /** PUT: increment a product by a count in a cart on the server */\n  updateProductCount(cId, pId, count) {\n    return this.http.put(this.cartsUrl + `/${cId}/${pId}/${count}`, null, this.httpOptions).pipe(tap(_ => this.log(`incremented product with id ${pId} in cart w/ id=${cId} by ${count}`)), catchError(this.handleError('addProductToCart')));\n  }\n}\nCartService.ɵfac = function CartService_Factory(t) {\n  return new (t || CartService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n};\nCartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CartService,\n  factory: CartService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["of","HttpHeaders","catchError","tap","CartService","constructor","http","messageService","headers","getCart","id","url","cartsUrl","get","pipe","_","log","handleError","operation","result","error","console","message","add","addCart","cart","post","httpOptions","newCart","addProductToCart","cId","product","quantity","put","updateProductCount","pId","count","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\broke\\Desktop\\SWEN-261\\team-project-2225-swen-261-06-g-ritgaragesale\\estore-ui\\src\\app\\cart.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\nimport { Cart } from './cart';\r\nimport { Product } from './product';\r\n\r\nimport { Observable, of } from 'rxjs';\r\n\r\nimport { MessageService } from './message.service';\r\n\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CartService {\r\n\r\n    private cartsUrl = 'http://localhost:8080/carts'\r\n\r\n    constructor(\r\n        private http: HttpClient,\r\n        private messageService: MessageService) { }\r\n\r\n\r\n\r\n    /** GET cart by id. Will 404 if id not found */\r\n    getCart(id: number): Observable<Cart> {\r\n        const url = `${this.cartsUrl}/${id}`;\r\n        return this.http.get<Cart>(url).pipe(\r\n            tap(_ => this.log(`fetched cart id=${id}`)),\r\n            catchError(this.handleError<Cart>(`getCart id=${id}`))\r\n        );\r\n    }\r\n\r\n    /**\r\n    * Handle Http operation that failed.\r\n    * Let the app continue.\r\n    *\r\n     * @param operation - name of the operation that failed\r\n    * @param result - optional value to return as the observable result\r\n     */\r\n    private handleError<T>(operation = 'operation', result?: T) {\r\n        return (error: any): Observable<T> => {\r\n  \r\n             // TODO: send the error to remote logging infrastructure\r\n             console.error(error); // log to console instead\r\n  \r\n             // TODO: better job of transforming error for user consumption\r\n            this.log(`${operation} failed: ${error.message}`);\r\n  \r\n            // Let the app keep running by returning an empty result.\r\n            return of(result as T);\r\n        };\r\n    }\r\n\r\n    /** Log a UserService message with the MessageService */\r\n    private log(message: string) {\r\n        this.messageService.add(`UserService: ${message}`);\r\n    }\r\n\r\n    httpOptions = {\r\n        headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n      };\r\n\r\n    /** POST: add a new cart to the server */\r\n    addCart(cart: Cart): Observable<Cart> {\r\n      return this.http.post<Cart>(this.cartsUrl, cart, this.httpOptions).pipe(\r\n        tap((newCart: Cart) => this.log(`added cart w/ id=${newCart.id}`)),\r\n        catchError(this.handleError<Cart>('addCart'))\r\n      );\r\n    }\r\n\r\n    /** PUT: add a product to a cart on the server */\r\n    addProductToCart(cId: number, product: Product): Observable<Cart> {\r\n        product.quantity=1;\r\n        return this.http.put<Cart>(this.cartsUrl+`/${cId}`, product, this.httpOptions).pipe(\r\n            tap(_ => this.log(`added product with id ${product.id} to cart w/ id=${cId}`)),\r\n            catchError(this.handleError<Cart>('addProductToCart'))\r\n          );\r\n    }\r\n\r\n    /** PUT: increment a product by a count in a cart on the server */\r\n    updateProductCount(cId: number, pId: number, count: number): Observable<Cart> {\r\n        return this.http.put<Cart>(this.cartsUrl+`/${cId}/${pId}/${count}`, null, this.httpOptions).pipe(\r\n            tap(_ => this.log(`incremented product with id ${pId} in cart w/ id=${cId} by ${count}`)),\r\n            catchError(this.handleError<Cart>('addProductToCart'))\r\n          );\r\n    }\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}